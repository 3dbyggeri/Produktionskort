= Produktionskort

== Generelt

Produktionskortet er udviklet i forbindelse med
{Det Digitale Byggeri}[http://www.detdigitalebyggeri.dk/] og betegnes populært
som entreprenørernes del af dette projekt. Produktionskortet er siden starten
udviklet af en række repræsentanter for udførende virksomheder i den danske
byggesektor og videreudvikles og afprøves i øjeblikket i et samarbejde mellem
{3dbyggeri danmark}[http://www.3dbyggeri.dk],
{CodeGroup}[http://www.codegroup.dk], {EG}[http://www.eg.dk],
{JAKON}[http://www.jakon.dk] og {LinKS Advice}[http://www.linkslabs.com].

=== Entreprenørens dataenhed

Produktionskortet er entreprenørens struktur, hvor information fra en række
parter kan samles. En proces - et produktionskort. Det er defineret i en
standardiseret data-struktur (XML). Strukturen kan bruges til at gemme data i.

=== Demonstrator: Opret, importer, eksporter, og udskriv produktionskort

Vi har udviklet en demonstrator. Formålet er at demonstrere hvordan
produktionskort kan genereres umiddelbart, også uden tilknytning til en 3D
objektmodel eller andre forudsætninger.

Demonstratoren er et simpelt værktøj der er baseret på produktionskortets
struktur. Mere avancerede systemer og værktøjer vil kunne bygges ud fra samme
struktur. Med demonstratoren kan du oprette dine egne produktionskort og gemme
dem som XML-filer til senere viderebearbejdning.

XML-strukturen kan bruges til at bygge nye fleksible systemer op omkring, så
entreprenøren kan få nye fleksible værktøjer til rådighed.

== Demo

Du kan se en demo af Produktionskort på http://produktionskort.heroku.com.
Demoen er password-beskyttet. For adgang hertil bedes du kontakte
projektkoordinator {Torben Klitgaard}[mailto:tk@linksadvice.com].

== API

Produktionskort stiller et
{REST API}[http://en.wikipedia.org/wiki/Representational_State_Transfer]
til rådighed. Dette kan benyttes til at tilgå samt manipulere byggesags og
produktionskort-data.

Data udveksles i XML-format.

=== Overblik over RESTful URL'er

  GET    /projects/:project_id/work_processes(.:format)   # Se alle produktionskort under given byggesag
  POST   /projects/:project_id/work_processes(.:format)   # Opret nyt produktionskort under given byggesag
  GET    /work_processes/:id(.:format)                    # Se detaljer om produktionskort
  PUT    /work_processes/:id(.:format)                    # Opdater produktionskort
  DELETE /work_processes/:id(.:format)                    # Slet produktionskort
  GET    /projects(.:format)                              # Se alle byggesager
  POST   /projects(.:format)                              # Opret byggesag
  GET    /projects/:id(.:format)                          # Se detaljer om byggesag
  PUT    /projects/:id(.:format)                          # Opdater byggesag
  DELETE /projects/:id(.:format)                          # Slet byggesag

=== HTML eller XML?

URL'en <tt>/projects</tt> kan returnere både HTML og XML. Der er to måder at
specificere det ønskede format. Normalt benyttes HTTP headeren <tt>Accept</tt>.

  curl -H 'Accept: application/xml' \
       http://produktionskort.heroku.com/projects

Alternativ kan man tilføje enten <tt>.html</tt> eller <tt>.xml</tt> som format
i slutningen af URL'en:

  curl http://produktionskort.heroku.com/projects.xml

=== Authentication

Da http://produktionskort.heroku.com i dag er beskyttet bag HTTP Basic
Authentication, skal du sørge for at din API klient logger ind med det korrekte
brugernavn og password.

Bemærk at nedenstående eksempler ikke viser dette.

Den simpleste måde vil blot være at tilføje brugernavn og password som en del
af URL'en:

  http://brugernavn:password@produktionskort.heroku.com

=== XML Schema

Der findes p.t. ikke nogen officiel XSD for Produktionskort API'et. Du kan få
en idé om den XML-struktur systemet benytter ved at studere resultatet af de
GET requests der er beskrevet oven for.

*Du skal dog være opmærksom på følgende: *

Ifm. POST og PUT requests bør den XML du sender til API'et ikke indeholde
tagsne <tt><created-at></tt> og <tt><updated-at></tt>. Disse
timestamps vedligeholdes selv af Produktionskort.

Ifm. POST requests bør du undlade at angive <tt><id></tt> tagget, da
resoursens ID automatisk vil blive tildelt af Produktionskort.

=== GET eksempler

Se alle byggesager

  curl -H 'Accept: application/xml' \
       http://produktionskort.heroku.com/projects

==== Request

  GET /projects HTTP/1.1
  Accept: application/xml

==== Response

  HTTP/1.1 200 OK
  Content-Type: application/xml; charset=utf-8
  Status: 200
  
  <?xml version="1.0" encoding="UTF-8"?>
  <projects type="array">
    <project>...</project>
    <project>...</project>
    <project>...</project>
  </projects>

===== Ingen data?

Hvis din forespårgsel ikke giver noget resultat vil du modtage dette XML
response:

  HTTP/1.1 200 OK
  Content-Type: application/xml; charset=utf-8
  Status: 200
  
  <?xml version="1.0" encoding="UTF-8"?>
  <nil-classes type="array"/>

==== Andre GET eksempler

Se detaljer omkring byggesag #1

  curl -H 'Accept: application/xml' \
       http://produktionskort.heroku.com/projects/1

Se all produktionskort for byggesag #1

  curl -H 'Accept: application/xml' \
       http://produktionskort.heroku.com/projects/1/work_processes

Se detaljer omkring produktionskort #1

  curl -H 'Accept: application/xml' \
       http://produktionskort.heroku.com/work_processes/1

=== POST eksempler

Opret ny byggesag

  curl -H 'Accept: application/xml' \
       -H 'Content-type: application/xml' \
       -X POST \
       -d [...] \
       http://produktionskort.heroku.com/projects

==== Request

  POST /projects HTTP/1.1
  Accept: application/xml
  Content-type: application/xml
  
  <project>
    <name>Navn på byggesag</name>
  </project>

==== Response

  HTTP/1.1 200 OK
  Content-Type: application/xml; charset=utf-8
  Status: 200
   
  <?xml version="1.0" encoding="UTF-8"?>
  <project>
    ...
  </project>

==== Andre POST eksempler

Opret nyt produktionskort under byggesag #1

  curl -H 'Accept: application/xml' \
       -H 'Content-type: application/xml' \
       -X POST \
       -d [...] \
       http://produktionskort.heroku.com/projects/1/work_processes

=== PUT eksempler

Opdater navnet på byggesag #1

  curl -H 'Accept: application/xml' \
       -H 'Content-type: application/xml' \
       -X PUT \
       -d [...] \
       http://produktionskort.heroku.com/projects/1

==== Request

  PUT /projects/1 HTTP/1.1
  Accept: application/xml
  Content-type: application/xml

  <project>
    <name>Nyt navn</name>
  </project>

==== Response

  HTTP/1.1 200 OK
  Content-Type: application/xml; charset=utf-8
  Status: 200
  
  <?xml version="1.0" encoding="UTF-8"?>
  <project>
    ...
  </project>

==== Andre PUT eksempler

Opdater aktivitet på produktionskort #1

  curl -H 'Accept: application/xml' \
       -H 'Content-type: application/xml' \
       -X PUT \
       -d [...] \
       http://produktionskort.heroku.com/work_processes/1

=== DELETE eksempler

Sletning af byggesag #1

  curl -H 'Accept: application/xml' \
       -X DELETE \
       http://produktionskort.heroku.com/projects/1

==== Request

  DELETE /projects/1 HTTP/1.1
  Accept: application/xml

==== Response

  HTTP/1.1 200 OK
  Content-Type: application/xml; charset=utf-8
  Status: 200

==== Andre DELETE eksempler

Sletning af produktionskort #1

  curl -H 'Accept: application/xml' \
       -X DELETE \
       http://produktionskort.heroku.com/work_processes/1

=== Håndtering af fejl

Ved validerings-fejl ifm. POST og PUT reqests vil responset se således ud:

  HTTP/1.1 400 Bad Request
  Content-Type: application/xml; charset=utf-8
  Status: 400
  
  <?xml version="1.0" encoding="UTF-8"?>
  <errors>
    <error>...</error>
    <error>...</error>
  </errors>
